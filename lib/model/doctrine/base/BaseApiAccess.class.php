<?php

/**
 * BaseApiAccess
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $api_key
 * @property string $api_secret
 * @property integer $user_id
 * @property User $User
 * 
 * @method string    getApiKey()     Returns the current record's "api_key" value
 * @method string    getApiSecret()  Returns the current record's "api_secret" value
 * @method integer   getUserId()     Returns the current record's "user_id" value
 * @method User      getUser()       Returns the current record's "User" value
 * @method ApiAccess setApiKey()     Sets the current record's "api_key" value
 * @method ApiAccess setApiSecret()  Sets the current record's "api_secret" value
 * @method ApiAccess setUserId()     Sets the current record's "user_id" value
 * @method ApiAccess setUser()       Sets the current record's "User" value
 * 
 * @package    dockeet
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BaseApiAccess extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('api_access');
        $this->hasColumn('api_key', 'string', 255, array(
             'notnull' => true,
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('api_secret', 'string', 255, array(
             'notnull' => true,
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             ));


        $this->index('api_key_unique', array(
             'fields' => 
             array(
              0 => 'api_key',
             ),
             'type' => 'unique',
             ));
        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('User', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'cascade',
             'onUpdate' => 'cascade'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}