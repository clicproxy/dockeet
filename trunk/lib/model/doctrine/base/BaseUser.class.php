<?php

/**
 * BaseUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $username
 * @property string $password
 * @property string $salt
 * @property string $email
 * @property boolean $admin
 * @property Doctrine_Collection $Categories
 * @property Doctrine_Collection $Documents
 * @property Doctrine_Collection $UserCategory
 * @property Doctrine_Collection $UserDocument
 * @property Doctrine_Collection $ApiAccess
 * 
 * @method string              getUsername()     Returns the current record's "username" value
 * @method string              getPassword()     Returns the current record's "password" value
 * @method string              getSalt()         Returns the current record's "salt" value
 * @method string              getEmail()        Returns the current record's "email" value
 * @method boolean             getAdmin()        Returns the current record's "admin" value
 * @method Doctrine_Collection getCategories()   Returns the current record's "Categories" collection
 * @method Doctrine_Collection getDocuments()    Returns the current record's "Documents" collection
 * @method Doctrine_Collection getUserCategory() Returns the current record's "UserCategory" collection
 * @method Doctrine_Collection getUserDocument() Returns the current record's "UserDocument" collection
 * @method Doctrine_Collection getApiAccess()    Returns the current record's "ApiAccess" collection
 * @method User                setUsername()     Sets the current record's "username" value
 * @method User                setPassword()     Sets the current record's "password" value
 * @method User                setSalt()         Sets the current record's "salt" value
 * @method User                setEmail()        Sets the current record's "email" value
 * @method User                setAdmin()        Sets the current record's "admin" value
 * @method User                setCategories()   Sets the current record's "Categories" collection
 * @method User                setDocuments()    Sets the current record's "Documents" collection
 * @method User                setUserCategory() Sets the current record's "UserCategory" collection
 * @method User                setUserDocument() Sets the current record's "UserDocument" collection
 * @method User                setApiAccess()    Sets the current record's "ApiAccess" collection
 * 
 * @package    dockeet
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BaseUser extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('user');
        $this->hasColumn('username', 'string', 255, array(
             'notnull' => true,
             'type' => 'string',
             'unique' => true,
             'length' => '255',
             ));
        $this->hasColumn('password', 'string', 255, array(
             'notnull' => true,
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('salt', 'string', 255, array(
             'notnull' => true,
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('email', 'string', 255, array(
             'notnull' => true,
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('admin', 'boolean', null, array(
             'type' => 'boolean',
             ));

        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Category as Categories', array(
             'refClass' => 'UserCategory',
             'local' => 'user_id',
             'foreign' => 'category_id'));

        $this->hasMany('Document as Documents', array(
             'refClass' => 'UserDocument',
             'local' => 'user_id',
             'foreign' => 'document_id'));

        $this->hasMany('UserCategory', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('UserDocument', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('ApiAccess', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'fields' => 
             array(
              0 => 'username',
             ),
             ));
        $this->actAs($timestampable0);
        $this->actAs($sluggable0);
    }
}