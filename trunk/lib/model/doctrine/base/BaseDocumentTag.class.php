<?php

/**
 * BaseDocumentTag
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $document_id
 * @property integer $tag_id
 * @property Document $Document
 * @property Tag $Tag
 * 
 * @method integer     getDocumentId()  Returns the current record's "document_id" value
 * @method integer     getTagId()       Returns the current record's "tag_id" value
 * @method Document    getDocument()    Returns the current record's "Document" value
 * @method Tag         getTag()         Returns the current record's "Tag" value
 * @method DocumentTag setDocumentId()  Sets the current record's "document_id" value
 * @method DocumentTag setTagId()       Sets the current record's "tag_id" value
 * @method DocumentTag setDocument()    Sets the current record's "Document" value
 * @method DocumentTag setTag()         Sets the current record's "Tag" value
 * 
 * @package    dockeet
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BaseDocumentTag extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('document_tag');
        $this->hasColumn('document_id', 'integer', null, array(
             'notnull' => true,
             'type' => 'integer',
             ));
        $this->hasColumn('tag_id', 'integer', null, array(
             'notnull' => true,
             'type' => 'integer',
             ));


        $this->index('document_tag_unique', array(
             'fields' => 
             array(
              0 => 'document_id',
              1 => 'tag_id',
             ),
             'type' => 'unique',
             ));
        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Document', array(
             'local' => 'document_id',
             'foreign' => 'id',
             'onDelete' => 'cascade',
             'onUpdate' => 'cascade'));

        $this->hasOne('Tag', array(
             'local' => 'tag_id',
             'foreign' => 'id',
             'onDelete' => 'cascade',
             'onUpdate' => 'cascade'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}